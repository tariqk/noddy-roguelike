#+TITLE: The Noddy Roguelike
#+AUTHOR: Tariq Kamal

A learning exercise on how to code a roguelike, using =pygame=.

I'm using [[http://therealkatie.net/blog/tags/pygame/][this tutorial]] as a base, and will likely deviate as we go along. See how lah!

* How This Was Set Up.

(From base install of Python 2.7.3, using the Debian [[https://packages.debian.org/stable/python/][stable package]] (as of <2015-01-05 Mon>):

- Install pip using [[https://bootstrap.pypa.io/get-pip.py][get-pip.py]].
- =sudo pip install virtualenv=
- =git clone https://github.com/tariqk/noddy-roguelike.git=.
- =virtualenv noddy-roguelike=
- Shenanigans with =pygame=, as seen below.

** Getting =pygame= installed in a python virtual env

First off: can't install it using =pip install pygame=, at least not for now.

These instructions assume you can compile the =pygame= module, which rules out, currently, Windows (at least vanilla — I've yet to try it, and it involves installing things I'm /completely/ unfamiliar with.

Do try to install it using =pip install hg+https://bitbucket.com/pygame/pygame=, if only to confirm that the problem you were having was because the bloody problem was related to the network and not something about bitbucket.

*** Installing on Linux

In the end, what we ended up doing was this (running on CrunchBang Waldorf):

#+begin_src sh
#! /bin/sh
sudo apt-get build-dep python-pygame
sudo apt-get install python-dev libsdl-image1.2-dev libsdl-mixer1.2-dev libsdl-ttf2.0-dev libsdl1.2-dev libsmpeg-dev python-numpy subversion libportmidi-dev ffmpeg libswscale-dev libavformat-dev libavcodec-dev libv4l-dev
cd /usr/include/linux
sudo ln -s ../libv4l1-videodev.h videodev.h
pip install https://bitbucket.org/pygame/pygame/get/db5966ca2b4d.zip
#+end_src

Basically: for some /damn/ reason, =pygame= keeps bloody referring to =videodev.h=, when it apparently doesn't bloody exist in the OS. Quick workaround? Create a symlink from =libv1l1-videodev.h= and call it =videodev.h=.

Bloody annoyance, but I finally got it done. Thank god. Shouldn't need to happen again, but you never know.

**** Updated <2015-02-19 Thu>: 

Looks like you can do this with the direct bitbucket repository link (i.e. go [[https://bitbucket.org/pygame/pygame/downloads][here]], choose the “Download repository” link, which as of today is [[https://bitbucket.org/pygame/pygame/get/db5966ca2b4d.zip][this]]). Whether this leads to breakage will need to be seen. But, on the plus side: I get up-to-date docs. 

If you want to use the current release version, use =pip install http://www.pygame.org/ftp/pygame-1.9.1release.tar.gz= instead.

** References

[[https://gist.github.com/brousch/6395214][First pointers on how to solve this problem]].

[[https://bitbucket.org/pygame/pygame/issue/140/pip-install-pygame-fails-on-ubuntu-1204][Pygame Issue #140, which references this problem]].

* Neat Ideas
- [ ] Clean up =viewport.py=:
  + Reference: Bob Nystrom's [[http://journal.stuffwithstuff.com/2014/07/15/a-turn-based-game-loop/][A Turn-Based Game Loop]], which outlines implementing a game loop using the Command Pattern. [[http://gameprogrammingpatterns.com/command.html][Here's him writing more about it]].
- [ ] Implement the map fully, using flyweights.
  + [[http://gameprogrammingpatterns.com/flyweight.html][Nystrom to the rescue again]].
  + [[https://push.cx/2006/python-flyweights][Another reference, this time using Python as an example]].
  + [[http://yloiseau.net/articles/DesignPatterns/flyweight/][Yannick Loiseau's version, which was the one I ended up using]].
    * [ ] Notes to self: rethink what extrinsic & intrinsic elements of flyweights are. What is common with all tiles of this type, and what isn't?
    * [ ] Consider some kind of "registration protocol" for both Actor() and Tile() classes. That way you can "register" a new tile without putting in new code.
- [ ] Level Generation:
  + [[http://journal.stuffwithstuff.com/2014/12/21/rooms-and-mazes/][My god I'm reading a lot of this guy]].
  + Things to look up:
    * Maze generation algorithms.
